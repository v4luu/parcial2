# Generated from function.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,153,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
        1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
        1,15,4,15,100,8,15,11,15,12,15,101,1,16,4,16,105,8,16,11,16,12,16,
        106,1,17,4,17,110,8,17,11,17,12,17,111,1,17,1,17,4,17,116,8,17,11,
        17,12,17,117,1,18,1,18,5,18,122,8,18,10,18,12,18,125,9,18,1,18,1,
        18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
        24,1,25,3,25,143,8,25,1,25,1,25,1,26,4,26,148,8,26,11,26,12,26,149,
        1,26,1,26,1,123,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,3,1,0,48,57,2,0,65,90,
        97,122,2,0,9,9,32,32,159,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,59,
        1,0,0,0,5,61,1,0,0,0,7,63,1,0,0,0,9,65,1,0,0,0,11,72,1,0,0,0,13,
        76,1,0,0,0,15,78,1,0,0,0,17,80,1,0,0,0,19,82,1,0,0,0,21,85,1,0,0,
        0,23,88,1,0,0,0,25,90,1,0,0,0,27,93,1,0,0,0,29,95,1,0,0,0,31,99,
        1,0,0,0,33,104,1,0,0,0,35,109,1,0,0,0,37,119,1,0,0,0,39,128,1,0,
        0,0,41,130,1,0,0,0,43,132,1,0,0,0,45,134,1,0,0,0,47,136,1,0,0,0,
        49,138,1,0,0,0,51,142,1,0,0,0,53,147,1,0,0,0,55,56,5,109,0,0,56,
        57,5,97,0,0,57,58,5,112,0,0,58,2,1,0,0,0,59,60,5,40,0,0,60,4,1,0,
        0,0,61,62,5,44,0,0,62,6,1,0,0,0,63,64,5,41,0,0,64,8,1,0,0,0,65,66,
        5,102,0,0,66,67,5,105,0,0,67,68,5,108,0,0,68,69,5,116,0,0,69,70,
        5,101,0,0,70,71,5,114,0,0,71,10,1,0,0,0,72,73,5,108,0,0,73,74,5,
        101,0,0,74,75,5,110,0,0,75,12,1,0,0,0,76,77,5,91,0,0,77,14,1,0,0,
        0,78,79,5,93,0,0,79,16,1,0,0,0,80,81,5,46,0,0,81,18,1,0,0,0,82,83,
        5,61,0,0,83,84,5,61,0,0,84,20,1,0,0,0,85,86,5,33,0,0,86,87,5,61,
        0,0,87,22,1,0,0,0,88,89,5,60,0,0,89,24,1,0,0,0,90,91,5,60,0,0,91,
        92,5,61,0,0,92,26,1,0,0,0,93,94,5,62,0,0,94,28,1,0,0,0,95,96,5,62,
        0,0,96,97,5,61,0,0,97,30,1,0,0,0,98,100,7,0,0,0,99,98,1,0,0,0,100,
        101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,32,1,0,0,0,103,105,
        7,1,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,
        1,0,0,0,107,34,1,0,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,111,1,
        0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,115,5,
        46,0,0,114,116,7,0,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,
        0,0,0,117,118,1,0,0,0,118,36,1,0,0,0,119,123,5,34,0,0,120,122,9,
        0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,124,1,0,0,0,123,121,1,
        0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,34,0,0,127,38,1,
        0,0,0,128,129,5,42,0,0,129,40,1,0,0,0,130,131,5,47,0,0,131,42,1,
        0,0,0,132,133,5,43,0,0,133,44,1,0,0,0,134,135,5,45,0,0,135,46,1,
        0,0,0,136,137,5,37,0,0,137,48,1,0,0,0,138,139,5,42,0,0,139,140,5,
        42,0,0,140,50,1,0,0,0,141,143,5,13,0,0,142,141,1,0,0,0,142,143,1,
        0,0,0,143,144,1,0,0,0,144,145,5,10,0,0,145,52,1,0,0,0,146,148,7,
        2,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,
        0,0,0,150,151,1,0,0,0,151,152,6,26,0,0,152,54,1,0,0,0,8,0,101,106,
        111,117,123,142,149,1,6,0,0
    ]

class functionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    INT = 16
    ID = 17
    FLOAT = 18
    STRING = 19
    MUL = 20
    DIV = 21
    ADD = 22
    SUB = 23
    MOD = 24
    POW = 25
    NEWLINE = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'map'", "'('", "','", "')'", "'filter'", "'len'", "'['", "']'", 
            "'.'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'*'", 
            "'/'", "'+'", "'-'", "'%'", "'**'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "ID", "FLOAT", "STRING", "MUL", "DIV", "ADD", "SUB", 
            "MOD", "POW", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "INT", "ID", "FLOAT", "STRING", "MUL", "DIV", 
                  "ADD", "SUB", "MOD", "POW", "NEWLINE", "WS" ]

    grammarFileName = "function.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


